{
  "swagger": "2.0",
  "info": {
    "title": "Afi API Calls",
    "description": "Afi API Description",
    "version": "1.0",
    "contact": {
      "name": "Afi",
      "url": "https://support.afi.ai",
      "email": "support@afi.ai"
    }
  },
  "tags": [
    {
      "name": "Applications"
    },
    {
      "name": "Audit"
    },
    {
      "name": "Licensing"
    },
    {
      "name": "Orgs"
    },
    {
      "name": "Policies"
    },
    {
      "name": "Protections"
    },
    {
      "name": "Resources"
    },
    {
      "name": "Tasks"
    },
    {
      "name": "Tenants"
    }
  ],
  "host": "papi.afi.ai",
  "schemes": [
    "https"
  ],
  "consumes": [
    "application/json"
  ],
  "produces": [
    "application/json"
  ],
  "paths": {
    "/api/v1/applications/me/installations": {
      "get": {
        "summary": "List installations",
        "description": "Installations are listed for the application defined by the authentication key.\nTo list all available installations, use 'limit' and 'page_token' as query parameters.",
        "operationId": "Applications_ListInstallations",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/v1InstallationPage"
            }
          },
          "400": {
            "description": "Invalid argument. Missing or invalid argument values used in the request.",
            "schema": {}
          },
          "401": {
            "description": "Unauthenticated. Invalid, expired or empty API key was used.",
            "schema": {}
          },
          "403": {
            "description": "Forbidden. The application does not have permission to access the entity.",
            "schema": {}
          },
          "404": {
            "description": "Not found. The requested entity does not exist.",
            "schema": {}
          },
          "429": {
            "description": "Too many requests. Application exceeded its API calls limit and should reduce the frequency of calls. Exponential backoff should be used to handle the rate limit.",
            "schema": {}
          }
        },
        "parameters": [
          {
            "name": "limit",
            "description": "Max number of items in resulting page.",
            "in": "query",
            "required": false,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "page_token",
            "description": "Token from the previous list operation (next_page_token) to continue listing.",
            "in": "query",
            "required": false,
            "type": "string"
          }
        ],
        "tags": [
          "Applications"
        ]
      }
    },
    "/api/v1/orgs/{id}": {
      "get": {
        "summary": "Retrieve an organization",
        "description": "Retrieves organization object by its ID.",
        "operationId": "Orgs_GetOrg",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/v1Org"
            }
          },
          "400": {
            "description": "Invalid argument. Missing or invalid argument values used in the request.",
            "schema": {}
          },
          "401": {
            "description": "Unauthenticated. Invalid, expired or empty API key was used.",
            "schema": {}
          },
          "403": {
            "description": "Forbidden. The application does not have permission to access the entity.",
            "schema": {}
          },
          "404": {
            "description": "Not found. The requested entity does not exist.",
            "schema": {}
          },
          "429": {
            "description": "Too many requests. Application exceeded its API calls limit and should reduce the frequency of calls. Exponential backoff should be used to handle the rate limit.",
            "schema": {}
          }
        },
        "parameters": [
          {
            "name": "id",
            "description": "ID of the organization to retrieve.",
            "in": "path",
            "required": true,
            "type": "string"
          }
        ],
        "tags": [
          "Orgs"
        ]
      }
    },
    "/api/v1/orgs/{org_id}/licensing/subscriptions": {
      "get": {
        "summary": "Retrieve subscription info",
        "description": "Retrieves tenant's subscription info.\nTo list all available subscriptions, use 'limit' and 'page_token' as query parameters.",
        "operationId": "Licensing_ListSubscriptions",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/v1SubscriptionsPage"
            }
          },
          "400": {
            "description": "Invalid argument. Missing or invalid argument values used in the request.",
            "schema": {}
          },
          "401": {
            "description": "Unauthenticated. Invalid, expired or empty API key was used.",
            "schema": {}
          },
          "403": {
            "description": "Forbidden. The application does not have permission to access the entity.",
            "schema": {}
          },
          "404": {
            "description": "Not found. The requested entity does not exist.",
            "schema": {}
          },
          "429": {
            "description": "Too many requests. Application exceeded its API calls limit and should reduce the frequency of calls. Exponential backoff should be used to handle the rate limit.",
            "schema": {}
          }
        },
        "parameters": [
          {
            "name": "org_id",
            "description": "ID of the organization to list subscriptions for.",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "limit",
            "description": "Max number of items in the resulting page.",
            "in": "query",
            "required": false,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "page_token",
            "description": "Token from the previous list operation (next_page_token) to continue listing.",
            "in": "query",
            "required": false,
            "type": "string"
          }
        ],
        "tags": [
          "Licensing"
        ]
      }
    },
    "/api/v1/orgs/{org_id}/orgs": {
      "get": {
        "summary": "List organizations",
        "description": "List children organizations of the specified parent organization.\nRoot organization and its sub-organizations comprise a hierarchy.\nEvery organization in the hierarchy may own its own tenants and resources.\n\nTo list all available organizations, use 'limit' and 'page_token' as query parameters.",
        "operationId": "Orgs_GetOrgOrgs",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/v1OrgsPage"
            }
          },
          "400": {
            "description": "Invalid argument. Missing or invalid argument values used in the request.",
            "schema": {}
          },
          "401": {
            "description": "Unauthenticated. Invalid, expired or empty API key was used.",
            "schema": {}
          },
          "403": {
            "description": "Forbidden. The application does not have permission to access the entity.",
            "schema": {}
          },
          "404": {
            "description": "Not found. The requested entity does not exist.",
            "schema": {}
          },
          "429": {
            "description": "Too many requests. Application exceeded its API calls limit and should reduce the frequency of calls. Exponential backoff should be used to handle the rate limit.",
            "schema": {}
          }
        },
        "parameters": [
          {
            "name": "org_id",
            "description": "ID of the parent organization to list child organizations for.",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "limit",
            "description": "Max number of items to return on a single page (default 100).",
            "in": "query",
            "required": false,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "page_token",
            "description": "Token from the previous list operation (next_page_token) to continue listing.",
            "in": "query",
            "required": false,
            "type": "string"
          }
        ],
        "tags": [
          "Orgs"
        ]
      }
    },
    "/api/v1/orgs/{org_id}/tenants": {
      "get": {
        "summary": "List organization tenants",
        "description": "List organization tenants by organization ID.\nTo list all available organizations, use 'limit' and 'page_token' as query parameters.",
        "operationId": "Tenants_GetOrgTenants",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/v1TenantsPage"
            }
          },
          "400": {
            "description": "Invalid argument. Missing or invalid argument values used in the request.",
            "schema": {}
          },
          "401": {
            "description": "Unauthenticated. Invalid, expired or empty API key was used.",
            "schema": {}
          },
          "403": {
            "description": "Forbidden. The application does not have permission to access the entity.",
            "schema": {}
          },
          "404": {
            "description": "Not found. The requested entity does not exist.",
            "schema": {}
          },
          "429": {
            "description": "Too many requests. Application exceeded its API calls limit and should reduce the frequency of calls. Exponential backoff should be used to handle the rate limit.",
            "schema": {}
          }
        },
        "parameters": [
          {
            "name": "org_id",
            "description": "ID of the organization to list tenants for.",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "limit",
            "description": "Max number of items to return on a single page (default 100).",
            "in": "query",
            "required": false,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "page_token",
            "description": "Token from the previous list operation (next_page_token) to continue listing.",
            "in": "query",
            "required": false,
            "type": "string"
          }
        ],
        "tags": [
          "Tenants"
        ]
      }
    },
    "/api/v1/tenants/{id}": {
      "get": {
        "summary": "Retrieve a tenant",
        "description": "Retrieves tenant object by its ID.",
        "operationId": "Tenants_GetTenant",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/v1Tenant"
            }
          },
          "400": {
            "description": "Invalid argument. Missing or invalid argument values used in the request.",
            "schema": {}
          },
          "401": {
            "description": "Unauthenticated. Invalid, expired or empty API key was used.",
            "schema": {}
          },
          "403": {
            "description": "Forbidden. The application does not have permission to access the entity.",
            "schema": {}
          },
          "404": {
            "description": "Not found. The requested entity does not exist.",
            "schema": {}
          },
          "429": {
            "description": "Too many requests. Application exceeded its API calls limit and should reduce the frequency of calls. Exponential backoff should be used to handle the rate limit.",
            "schema": {}
          }
        },
        "parameters": [
          {
            "name": "id",
            "description": "ID of the tenant to retrieve.",
            "in": "path",
            "required": true,
            "type": "string"
          }
        ],
        "tags": [
          "Tenants"
        ]
      }
    },
    "/api/v1/tenants/{tenant_id}/audit/events": {
      "get": {
        "summary": "List audit events",
        "description": "Get a list of audit events for the specified tenant.\nTo list all available events, use 'limit' and 'page_token' as query parameters.",
        "operationId": "Audit_ListAuditEvents",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/v1AuditEventsPage"
            }
          },
          "400": {
            "description": "Invalid argument. Missing or invalid argument values used in the request.",
            "schema": {}
          },
          "401": {
            "description": "Unauthenticated. Invalid, expired or empty API key was used.",
            "schema": {}
          },
          "403": {
            "description": "Forbidden. The application does not have permission to access the entity.",
            "schema": {}
          },
          "404": {
            "description": "Not found. The requested entity does not exist.",
            "schema": {}
          },
          "429": {
            "description": "Too many requests. Application exceeded its API calls limit and should reduce the frequency of calls. Exponential backoff should be used to handle the rate limit.",
            "schema": {}
          }
        },
        "parameters": [
          {
            "name": "tenant_id",
            "description": "Tenant to list events for.",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "limit",
            "description": "Max number of items to return per page.",
            "in": "query",
            "required": false,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "page_token",
            "description": "Token from the previous list operation (next_page_token) to continue listing.",
            "in": "query",
            "required": false,
            "type": "string"
          }
        ],
        "tags": [
          "Audit"
        ]
      }
    },
    "/api/v1/tenants/{tenant_id}/jobs/{job_id}/trigger": {
      "put": {
        "summary": "Trigger job execution",
        "description": "Triggers out-of-schedule job execution and spawns a task. Returns task ID as a result.",
        "operationId": "Tasks_TriggerJob",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/v1TriggerJobResult"
            }
          },
          "400": {
            "description": "Invalid argument. Missing or invalid argument values used in the request.",
            "schema": {}
          },
          "401": {
            "description": "Unauthenticated. Invalid, expired or empty API key was used.",
            "schema": {}
          },
          "403": {
            "description": "Forbidden. The application does not have permission to access the entity.",
            "schema": {}
          },
          "404": {
            "description": "Not found. The requested entity does not exist.",
            "schema": {}
          },
          "429": {
            "description": "Too many requests. Application exceeded its API calls limit and should reduce the frequency of calls. Exponential backoff should be used to handle the rate limit.",
            "schema": {}
          }
        },
        "parameters": [
          {
            "name": "tenant_id",
            "description": "Tenant where the job belongs to.",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "job_id",
            "description": "ID of the job to trigger.",
            "in": "path",
            "required": true,
            "type": "string"
          }
        ],
        "tags": [
          "Tasks"
        ]
      }
    },
    "/api/v1/tenants/{tenant_id}/policies": {
      "get": {
        "summary": "List policies",
        "description": "Get a list of policies available for the tenant.\nTo list all available policies, use 'limit' and 'page_token' as query parameters.",
        "operationId": "Policies_ListPolicies",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/v1PoliciesPage"
            }
          },
          "400": {
            "description": "Invalid argument. Missing or invalid argument values used in the request.",
            "schema": {}
          },
          "401": {
            "description": "Unauthenticated. Invalid, expired or empty API key was used.",
            "schema": {}
          },
          "403": {
            "description": "Forbidden. The application does not have permission to access the entity.",
            "schema": {}
          },
          "404": {
            "description": "Not found. The requested entity does not exist.",
            "schema": {}
          },
          "429": {
            "description": "Too many requests. Application exceeded its API calls limit and should reduce the frequency of calls. Exponential backoff should be used to handle the rate limit.",
            "schema": {}
          }
        },
        "parameters": [
          {
            "name": "tenant_id",
            "description": "Tenant to list policies at.",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "limit",
            "description": "Max number of items to return.",
            "in": "query",
            "required": false,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "page_token",
            "description": "Token from the previous list operation (next_page_token) to continue listing.",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "name",
            "description": "Optional. Specific policy name to filter the listing by.",
            "in": "query",
            "required": false,
            "type": "string"
          }
        ],
        "tags": [
          "Policies"
        ]
      }
    },
    "/api/v1/tenants/{tenant_id}/protections": {
      "get": {
        "summary": "List protections",
        "description": "Get a list of protections assigned to tenant resource(s).\nTo list all available protections use 'limit' and 'page_token' as query parameters.",
        "operationId": "Protections_ListProtections",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/v1ProtectionPage"
            }
          },
          "400": {
            "description": "Invalid argument. Missing or invalid argument values used in the request.",
            "schema": {}
          },
          "401": {
            "description": "Unauthenticated. Invalid, expired or empty API key was used.",
            "schema": {}
          },
          "403": {
            "description": "Forbidden. The application does not have permission to access the entity.",
            "schema": {}
          },
          "404": {
            "description": "Not found. The requested entity does not exist.",
            "schema": {}
          },
          "429": {
            "description": "Too many requests. Application exceeded its API calls limit and should reduce the frequency of calls. Exponential backoff should be used to handle the rate limit.",
            "schema": {}
          }
        },
        "parameters": [
          {
            "name": "tenant_id",
            "description": "Tenant for which to get the list of all protections.",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "resource_id",
            "description": "ID of the resource to list protections for.",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "limit",
            "description": "Max number of items to return on a single page.",
            "in": "query",
            "required": false,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "page_token",
            "description": "Token from the previous list operation (next_page_token) to continue listing.",
            "in": "query",
            "required": false,
            "type": "string"
          }
        ],
        "tags": [
          "Protections"
        ]
      }
    },
    "/api/v1/tenants/{tenant_id}/resources": {
      "get": {
        "summary": "List resources",
        "description": "Get a list of resources available for the tenant.\nTo list all available resources use 'limit' and 'page_token' as query parameters.",
        "operationId": "Resources_ListResources",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/v1ResourcePage"
            }
          },
          "400": {
            "description": "Invalid argument. Missing or invalid argument values used in the request.",
            "schema": {}
          },
          "401": {
            "description": "Unauthenticated. Invalid, expired or empty API key was used.",
            "schema": {}
          },
          "403": {
            "description": "Forbidden. The application does not have permission to access the entity.",
            "schema": {}
          },
          "404": {
            "description": "Not found. The requested entity does not exist.",
            "schema": {}
          },
          "429": {
            "description": "Too many requests. Application exceeded its API calls limit and should reduce the frequency of calls. Exponential backoff should be used to handle the rate limit.",
            "schema": {}
          }
        },
        "parameters": [
          {
            "name": "tenant_id",
            "description": "Tenant to get the list of all resources from.",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "limit",
            "description": "Max number of items to return on a single page.",
            "in": "query",
            "required": false,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "page_token",
            "description": "Token from the previous list operation (next_page_token) to continue listing.",
            "in": "query",
            "required": false,
            "type": "string"
          }
        ],
        "tags": [
          "Resources"
        ]
      }
    },
    "/api/v1/tenants/{tenant_id}/resources/statistics/summary": {
      "get": {
        "summary": "Resources protection statistics",
        "description": "Retrieves protection statistics for resources in a given tenant grouped by resource kind.",
        "operationId": "Resources_GetResourcesStats",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/v1ResourceStats"
            }
          },
          "400": {
            "description": "Invalid argument. Missing or invalid argument values used in the request.",
            "schema": {}
          },
          "401": {
            "description": "Unauthenticated. Invalid, expired or empty API key was used.",
            "schema": {}
          },
          "403": {
            "description": "Forbidden. The application does not have permission to access the entity.",
            "schema": {}
          },
          "404": {
            "description": "Not found. The requested entity does not exist.",
            "schema": {}
          },
          "429": {
            "description": "Too many requests. Application exceeded its API calls limit and should reduce the frequency of calls. Exponential backoff should be used to handle the rate limit.",
            "schema": {}
          }
        },
        "parameters": [
          {
            "name": "tenant_id",
            "description": "Tenant for which we want to get resource statistics for.",
            "in": "path",
            "required": true,
            "type": "string"
          }
        ],
        "tags": [
          "Resources"
        ]
      }
    },
    "/api/v1/tenants/{tenant_id}/resources/{id}": {
      "get": {
        "summary": "Retrieve a resource",
        "description": "Retrieves resource object by its ID or external ID.",
        "operationId": "Resources_GetResource",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/v1Resource"
            }
          },
          "400": {
            "description": "Invalid argument. Missing or invalid argument values used in the request.",
            "schema": {}
          },
          "401": {
            "description": "Unauthenticated. Invalid, expired or empty API key was used.",
            "schema": {}
          },
          "403": {
            "description": "Forbidden. The application does not have permission to access the entity.",
            "schema": {}
          },
          "404": {
            "description": "Not found. The requested entity does not exist.",
            "schema": {}
          },
          "429": {
            "description": "Too many requests. Application exceeded its API calls limit and should reduce the frequency of calls. Exponential backoff should be used to handle the rate limit.",
            "schema": {}
          }
        },
        "parameters": [
          {
            "name": "tenant_id",
            "description": "Tenant where the resource belongs to.",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "id",
            "description": "ID of resource to retrieve. External ID can be used if prefixed with 'ext$'.",
            "in": "path",
            "required": true,
            "type": "string"
          }
        ],
        "tags": [
          "Resources"
        ]
      }
    },
    "/api/v1/tenants/{tenant_id}/resources/{resource_id}/protect": {
      "delete": {
        "summary": "Unprotect a resource",
        "description": "Unassign given policy from the resource.",
        "operationId": "Protections_UnprotectResource",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "type": "object",
              "properties": {}
            }
          },
          "400": {
            "description": "Invalid argument. Missing or invalid argument values used in the request.",
            "schema": {}
          },
          "401": {
            "description": "Unauthenticated. Invalid, expired or empty API key was used.",
            "schema": {}
          },
          "403": {
            "description": "Forbidden. The application does not have permission to access the entity.",
            "schema": {}
          },
          "404": {
            "description": "Not found. The requested entity does not exist.",
            "schema": {}
          },
          "429": {
            "description": "Too many requests. Application exceeded its API calls limit and should reduce the frequency of calls. Exponential backoff should be used to handle the rate limit.",
            "schema": {}
          }
        },
        "parameters": [
          {
            "name": "tenant_id",
            "description": "Tenant where the resource belongs to.",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "resource_id",
            "description": "ID of the resource to unprotect. External ID can NOT be used here.",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "policy_id",
            "description": "Policy ID to unassign from the resource.",
            "in": "query",
            "required": true,
            "type": "string"
          }
        ],
        "tags": [
          "Protections"
        ]
      },
      "post": {
        "summary": "Protect a resource",
        "description": "Assigns given policy to the resource. No more than one policy can be assigned to the resource by default.",
        "operationId": "Protections_ProtectResource",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/v1ProtectResourceResult"
            }
          },
          "400": {
            "description": "Invalid argument. Missing or invalid argument values used in the request.",
            "schema": {}
          },
          "401": {
            "description": "Unauthenticated. Invalid, expired or empty API key was used.",
            "schema": {}
          },
          "403": {
            "description": "Forbidden. The application does not have permission to access the entity.",
            "schema": {}
          },
          "404": {
            "description": "Not found. The requested entity does not exist.",
            "schema": {}
          },
          "429": {
            "description": "Too many requests. Application exceeded its API calls limit and should reduce the frequency of calls. Exponential backoff should be used to handle the rate limit.",
            "schema": {}
          }
        },
        "parameters": [
          {
            "name": "tenant_id",
            "description": "Tenant where the resource belongs to.",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "resource_id",
            "description": "ID of the resource to protect. External ID can NOT be used here.",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "type": "object",
              "properties": {}
            }
          },
          {
            "name": "policy_id",
            "description": "Policy ID to assign to the resource.",
            "in": "query",
            "required": true,
            "type": "string"
          }
        ],
        "tags": [
          "Protections"
        ]
      }
    },
    "/api/v1/tenants/{tenant_id}/tasks/statistics/summary": {
      "get": {
        "summary": "Task status statistics for a tenant",
        "description": "Returns task statistics aggregated by task status for a given time period.\nPeriod should be no longer than 31 days and have to be within the last 35 days.\nTenantID is used to specify the tenant for which statistics should be retrieved.",
        "operationId": "Tasks_GetTaskTenantStats",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/v1TaskTenantStats"
            }
          },
          "400": {
            "description": "Invalid argument. Missing or invalid argument values used in the request.",
            "schema": {}
          },
          "401": {
            "description": "Unauthenticated. Invalid, expired or empty API key was used.",
            "schema": {}
          },
          "403": {
            "description": "Forbidden. The application does not have permission to access the entity.",
            "schema": {}
          },
          "404": {
            "description": "Not found. The requested entity does not exist.",
            "schema": {}
          },
          "429": {
            "description": "Too many requests. Application exceeded its API calls limit and should reduce the frequency of calls. Exponential backoff should be used to handle the rate limit.",
            "schema": {}
          }
        },
        "parameters": [
          {
            "name": "tenant_id",
            "description": "Tenant to fetch task statistics for.",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "start_time",
            "description": "Start time of the period for which we want to retrieve the tenant tasks statistics.\nShould be specified with an hour granularity, which allows to get day statistics according to specific time zone.\nWould be rounded to the nearest hour if not already rounded by the caller.\nDate format should be specified in RFC3339 format.",
            "in": "query",
            "required": true,
            "type": "string",
            "format": "date-time"
          },
          {
            "name": "end_time",
            "description": "End time of the period for which we want to get the statistics.",
            "in": "query",
            "required": true,
            "type": "string",
            "format": "date-time"
          }
        ],
        "tags": [
          "Tasks"
        ]
      }
    },
    "/api/v1/tenants/{tenant_id}/tasks/{task_id}": {
      "get": {
        "summary": "Retrieves a task",
        "description": "Retrieves a task object by its ID.\n\nPolling of task status to wait its completion should be done with an exponentially growing timeout\nstarting with a minimum of 15 seconds and up to 4 minutes (15s, 30s, 60s, 2min, 4min).\nRequesting task status more frequently is useless as its cached and returned state won't change\nsooner than that, but can increase probability of getting 429 error for exceeding request rate limits.",
        "operationId": "Tasks_GetTask",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/v1Task"
            }
          },
          "400": {
            "description": "Invalid argument. Missing or invalid argument values used in the request.",
            "schema": {}
          },
          "401": {
            "description": "Unauthenticated. Invalid, expired or empty API key was used.",
            "schema": {}
          },
          "403": {
            "description": "Forbidden. The application does not have permission to access the entity.",
            "schema": {}
          },
          "404": {
            "description": "Not found. The requested entity does not exist.",
            "schema": {}
          },
          "429": {
            "description": "Too many requests. Application exceeded its API calls limit and should reduce the frequency of calls. Exponential backoff should be used to handle the rate limit.",
            "schema": {}
          }
        },
        "parameters": [
          {
            "name": "tenant_id",
            "description": "Tenant where the task belongs to.",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "task_id",
            "description": "ID of the task to retrieve.",
            "in": "path",
            "required": true,
            "type": "string"
          }
        ],
        "tags": [
          "Tasks"
        ]
      }
    }
  },
  "definitions": {
    "publicapigwv1License": {
      "type": "object",
      "properties": {
        "sku": {
          "type": "string",
          "title": "SKU identifies licensed product"
        },
        "qty": {
          "type": "string",
          "format": "int64",
          "title": "qty shows the number of owned units"
        }
      },
      "title": "License provides subscription's licenses info"
    },
    "v1AuditEvent": {
      "type": "object",
      "properties": {
        "id": {
          "type": "string",
          "description": "Event ID."
        },
        "actor_email": {
          "type": "string",
          "description": "Email of the actor who triggered the event."
        },
        "actor_name": {
          "type": "string",
          "description": "Name of the actor who triggered the event."
        },
        "action": {
          "type": "string",
          "description": "Action performed by the actor."
        },
        "subject": {
          "type": "string",
          "description": "Subject acted upon."
        },
        "created_at": {
          "type": "string",
          "format": "date-time",
          "title": "CreatedAt when event was saved"
        },
        "details": {
          "type": "string",
          "description": "Details contain more information about event in JSON format.\nExact format of Details field depends on audit event type and can potentially change in future product versions."
        }
      },
      "description": "AuditEvent describes an audit event."
    },
    "v1AuditEventsPage": {
      "type": "object",
      "properties": {
        "next_page_token": {
          "type": "string",
          "description": "Next page token to continue listing operation, i.e. to be set as next request page_token. Empty on last page."
        },
        "items": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/v1AuditEvent"
          },
          "title": "Array of audit events"
        }
      },
      "description": "AuditEventsPage is a result of audit events listing."
    },
    "v1Installation": {
      "type": "object",
      "properties": {
        "tenant_id": {
          "type": "string",
          "description": "The tenant where the application is installed.\nEmpty for organization-wide application installations."
        },
        "org_id": {
          "type": "string",
          "description": "The organization where the application is installed.\nEmpty for tenant application installations."
        }
      },
      "description": "Installation describes an application installation properties.\n\nApplications can be installed into specific tenants or organization-wide.\nIn the latter case tenant_id is empty and you may want to use \"Retrieve organization info\" API call\nto enumerate tenants inside the organization specified by the installation."
    },
    "v1InstallationPage": {
      "type": "object",
      "properties": {
        "next_page_token": {
          "type": "string",
          "description": "Next page token to continue listing operation, i.e. to be set as next request page_token. Empty on last page."
        },
        "items": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/v1Installation"
          },
          "title": "Array of Installations"
        }
      },
      "description": "InstallationPage is a result of application installations listing."
    },
    "v1Org": {
      "type": "object",
      "properties": {
        "id": {
          "type": "string",
          "title": "Unique ID of the organization"
        },
        "name": {
          "type": "string",
          "title": "Organization name"
        }
      },
      "description": "Org describes organization object."
    },
    "v1OrgsPage": {
      "type": "object",
      "properties": {
        "next_page_token": {
          "type": "string",
          "description": "Next page token to continue listing operation, i.e. to be set as next request page_token. Empty on last page."
        },
        "items": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/v1Org"
          },
          "description": "Array of organizations."
        }
      },
      "description": "OrgsPage is the result of organizations listing."
    },
    "v1PoliciesPage": {
      "type": "object",
      "properties": {
        "next_page_token": {
          "type": "string",
          "description": "Next page token to continue listing operation, i.e. to be set as next request page_token. Empty on last page."
        },
        "items": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/v1Policy"
          },
          "description": "Array of policies."
        }
      },
      "description": "PoliciesPage is a result of listing policies."
    },
    "v1Policy": {
      "type": "object",
      "properties": {
        "id": {
          "type": "string",
          "description": "Policy ID."
        },
        "tenant_id": {
          "type": "string",
          "description": "Tenant where the policy belongs to."
        },
        "name": {
          "type": "string",
          "description": "Policy Name."
        }
      },
      "description": "Policy describes a policy."
    },
    "v1ProtectResourceResult": {
      "type": "object",
      "properties": {
        "job_id": {
          "type": "string",
          "description": "Job ID corresponding to the protection."
        }
      },
      "title": "ProtectResourceResult returns result of resource protection"
    },
    "v1Protection": {
      "type": "object",
      "properties": {
        "id": {
          "type": "string",
          "description": "Protection ID."
        },
        "resource_id": {
          "type": "string",
          "description": "Resource ID protected by the policy."
        },
        "policy_id": {
          "type": "string",
          "description": "Policy ID applied by protection."
        },
        "job_id": {
          "type": "string",
          "description": "Job ID describing a periodic (or one-shot) schedule. Jobs spawn tasks."
        }
      },
      "description": "Protection describes the relation between resources and policies, i.e. a policies applied to the resource."
    },
    "v1ProtectionPage": {
      "type": "object",
      "properties": {
        "next_page_token": {
          "type": "string",
          "description": "Next page token to continue listing operation, i.e. to be set as next request page_token. Empty on last page."
        },
        "items": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/v1Protection"
          },
          "description": "Array of protections."
        }
      },
      "description": "Protection is a result of listing protections."
    },
    "v1Resource": {
      "type": "object",
      "properties": {
        "id": {
          "type": "string",
          "description": "Unique ID of the resource."
        },
        "external_id": {
          "type": "string",
          "description": "External (GSuite, Office365, etc.) ID of the resource."
        },
        "tenant_id": {
          "type": "string",
          "description": "Tenant where the resource belongs to."
        },
        "name": {
          "type": "string",
          "description": "Resource name: user and email for GSuite/Office365 users, name for Shared Drives, etc."
        }
      },
      "description": "Resource describes a single resource object.",
      "title": "Resource object"
    },
    "v1ResourcePage": {
      "type": "object",
      "properties": {
        "next_page_token": {
          "type": "string",
          "description": "Next page token to continue listing operation, i.e. to be set as next request page_token. Empty on last page."
        },
        "items": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/v1Resource"
          },
          "description": "Array of resources."
        }
      },
      "description": "ResourcePage is a result of listing resources."
    },
    "v1ResourceStats": {
      "type": "object",
      "properties": {
        "tenants": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/v1ResourceTenantStats"
          }
        }
      },
      "title": "ResourceStats contains tenant resource statistics"
    },
    "v1ResourceStatsDetailedEntry": {
      "type": "object",
      "properties": {
        "kind": {
          "type": "string",
          "description": "Resource kind."
        },
        "count": {
          "type": "integer",
          "format": "int32",
          "description": "Count of resources with the given kind."
        },
        "protected_count": {
          "type": "integer",
          "format": "int32",
          "description": "Count of protected resources with the given kind."
        }
      },
      "title": "ResourceStatsDetailedEntry contains statistics per resource kind"
    },
    "v1ResourceStatsTotalEntry": {
      "type": "object",
      "properties": {
        "count": {
          "type": "integer",
          "format": "int32",
          "description": "Total count of resources."
        },
        "protected_count": {
          "type": "integer",
          "format": "int32",
          "description": "Total count of protected resources."
        },
        "size_total": {
          "type": "string",
          "format": "int64",
          "description": "Total resource storage in KB."
        }
      },
      "title": "ResourceStatsTotalEntry contains total statistics for all resources"
    },
    "v1ResourceTenantStats": {
      "type": "object",
      "properties": {
        "tenant_id": {
          "type": "string",
          "description": "Tenant where the resource belongs to."
        },
        "kind": {
          "type": "string",
          "description": "Tenant kind: gsuite, o365 or etc."
        },
        "name": {
          "type": "string",
          "description": "Tenant name."
        },
        "resource_details": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/v1ResourceStatsDetailedEntry"
          },
          "description": "Detailed resource statistics for the tenant aggregated per resource kind."
        },
        "resources_total": {
          "$ref": "#/definitions/v1ResourceStatsTotalEntry",
          "description": "Aggregated information about all tenant resources."
        }
      },
      "title": "ResourceTenantStats represents single tenant statistics"
    },
    "v1Subscription": {
      "type": "object",
      "properties": {
        "id": {
          "type": "string",
          "description": "ID of the subscription."
        },
        "status": {
          "type": "string",
          "description": "Subscription status. Possible values are trial, trial_expired, active, expired or canceled."
        },
        "expires": {
          "type": "string",
          "format": "date-time",
          "title": "Expiration time"
        },
        "tenant_id": {
          "type": "string",
          "description": "ID of the tenant assigned to the subscription."
        },
        "licenses": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/publicapigwv1License"
          },
          "title": "Licenses provides tenant licenses information"
        }
      },
      "title": "Subscription describes tenant subscription struct"
    },
    "v1SubscriptionsPage": {
      "type": "object",
      "properties": {
        "next_page_token": {
          "type": "string",
          "description": "Next page token to continue listing operation, i.e. to be set as next request page_token. Empty on last page."
        },
        "items": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/v1Subscription"
          },
          "description": "Array of subscriptions matching listing request."
        }
      },
      "description": "SubscriptionsPage is a result of listing subscriptions."
    },
    "v1Task": {
      "type": "object",
      "properties": {
        "id": {
          "type": "string",
          "description": "Task ID."
        },
        "resource_id": {
          "type": "string",
          "description": "ID of the resource with which the task is associated."
        },
        "status": {
          "type": "string",
          "description": "Task status (open, inprogress, done, failed, suspended, warnings, canceled).\ndone, failed, warnings and canceled status are terminal states.\n**warnings** status implies that the task was completed, but with some warnings which might require attention."
        }
      },
      "description": "Task describes a single task object.",
      "title": "Task object"
    },
    "v1TaskStatusStats": {
      "type": "object",
      "properties": {
        "done": {
          "type": "integer",
          "format": "int32"
        },
        "failed": {
          "type": "integer",
          "format": "int32"
        },
        "warnings": {
          "type": "integer",
          "format": "int32"
        }
      }
    },
    "v1TaskTenantStats": {
      "type": "object",
      "properties": {
        "total": {
          "$ref": "#/definitions/v1TaskStatusStats"
        },
        "by_action": {
          "type": "object",
          "additionalProperties": {
            "$ref": "#/definitions/v1TaskStatusStats"
          }
        }
      }
    },
    "v1Tenant": {
      "type": "object",
      "properties": {
        "id": {
          "type": "string",
          "description": "Unique ID of the tenant."
        },
        "external_id": {
          "type": "string",
          "description": "External (GSuite, Office365, etc.) ID of the tenant."
        },
        "kind": {
          "type": "string",
          "title": "Kind of the tenant (gsuite for Google Workspace, o365 for Microsoft365 etc.)"
        },
        "name": {
          "type": "string",
          "description": "Tenant name. Domain name for GSuite/Office365 tenants."
        },
        "region": {
          "type": "string",
          "title": "Region where tenant resides in. 2 letter country or territory code in accordance with ISO 3166-1 alpha-2 (e.g. US, CA, AU, UK, EU etc.)"
        }
      },
      "description": "Tenant describes single tenant object."
    },
    "v1TenantsPage": {
      "type": "object",
      "properties": {
        "next_page_token": {
          "type": "string",
          "description": "Next page token to continue listing operation, i.e. to be set as next request page_token. Empty on last page."
        },
        "items": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/v1Tenant"
          },
          "description": "Array of tenants."
        }
      },
      "description": "TenantsPage is a result of listing orngaization tenants."
    },
    "v1TriggerJobResult": {
      "type": "object",
      "properties": {
        "task_id": {
          "type": "string",
          "description": "ID of the task spawned by the job. Can be used to monitor its status later."
        }
      },
      "title": "TriggerJobResult returns result of triggerring a job"
    }
  },
  "securityDefinitions": {
    "ApplicationAuthKey": {
      "type": "apiKey",
      "name": "Authorization",
      "in": "header"
    }
  },
  "security": [
    {
      "ApplicationAuthKey": []
    }
  ]
}

